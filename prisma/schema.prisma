// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  fullName  String
  password  String
  articles  Article[]
  createdAt DateTime   @default(now())
  // updatedAt DateTime   @updatedAt
  Reply     Reply[]
  Reaction  Reaction[]
}

model Article {
  id          Int        @id @default(autoincrement())
  uid         Int
  title       String
  description String
  content     String
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [uid], references: [id])
  Reaction    Reaction[]
}

enum ReactionType {
  LIKE
  DISLIKE
}

model Reaction {
  id        Int          @id @default(autoincrement())
  articleId Int
  userId    Int
  type      ReactionType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  article Article @relation(fields: [articleId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([articleId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String
  articleId Int
  replies   Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id])
}

model Reply {
  id          Int      @id @default(autoincrement())
  reply       String
  commentId   Int
  commenterId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  commenter User    @relation(fields: [commenterId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])
}
